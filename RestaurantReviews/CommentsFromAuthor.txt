Assumptions made and general thoughts:

1.  Upon logging into the application, the client has the UserId. This may be through a login API or something similar.
    (Passing database IDs around is silly, though, and I would much prefer using a token of some sort to validate instead.)

2.  Probably, we should inquire whether a single user can create multiple reviews for a restaurant, but I'm going off the explicit requirements given.
    Thus, a user can submit multiple reviews for the same restaurant with this API for now. (Future enhancement? Should just be a change to the sproc)
    
3.  A timestamp should be added to each review, but not entirely sure if that matters or not. Something to clarify with the client.


Integration Tests Performed Manually:

Insert Restaurant:
- PUT https://localhost:44336/api/reviews/restaurants/new?name=Test1&city=Pittsburgh
    Expectation: Record added to DB
    Result: as expected
- PUT https://localhost:44336/api/reviews/restaurants/new?name=Test1&city=Pittsburgh
    Expectation: No change, only the original record should exist, not 2, ID remaining intact
    Result: as expected
- PUT https://localhost:44336/api/reviews/restaurants/new?name=Test2&city=Pittsburgh
    Expectation: Two records, "Test1" and "Test2" in database
    Result: as expected

Get Restaurants by City:
- GET https://localhost:44336/api/reviews/restaurants?city=Pittsburgh
    Expectation: Two records returned, "Test1" and "Test2" with city and IDs
    Result: as expected

Add User to Database:
- POST https://localhost:44336/api/reviews/user/add?firstName=Test&lastName=User
    Expectation: Single User record added to DB
    Result: as expected
- POST https://localhost:44336/api/reviews/user/add?firstName=Test&lastName=User
    Expectation: Single User record added to DB (total two entries with unique IDs)
    Result: as expected

Add Review to Database:
- POST https://localhost:44336/api/reviews/new?userId=92DB8B30-6E5A-4AC5-9C09-56C41F2DD3AD&restaurantId=E44FA6AD-0825-462A-B58F-07032B98F398&rating=5&reviewText=It was fantastic this time!
    Expectation: Single Review added to the database (note that the userId and restaurantId should be unique to the database instance)
    Result: as expected

Add second review to database for same restaurant, same user as above
- POST https://localhost:44336/api/reviews/new?userId=92DB8B30-6E5A-4AC5-9C09-56C41F2DD3AD&restaurantId=E44FA6AD-0825-462A-B58F-07032B98F398&rating=5&reviewText=It was fantastic this time!
    Expectation: Single Review added to the database (note that the userId and restaurantId should be unique to the database instance)
    Result: as expected

Get list of reviews by user
- GET https://localhost:44336/api/reviews/user?id=92DB8B30-6E5A-4AC5-9C09-56C41F2DD3AD
    Expectation: List of multiple reviews only from the user listed
    Result: as expected
